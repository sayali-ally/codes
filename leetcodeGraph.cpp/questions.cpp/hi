


void reverse(int arr[],int start,int end){
    while(start<end){
        int temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        start++;
        end--;
    }
}

reverse(arr,arr+n);


void reverse(string s,int l,int r){
    while(l<r){
        char temp=s[l];
        s[l]=s[r];
        s[r]=temp;
        l++;
        r--;
    }
}

void reverse(Node*head){
    Node*curr=head;
    Node*prev=NULL;
    Node*next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    head=prev;
}


remove duplicates from sorted array without extra space 
int j=0;
for(int i=0;i<n-1;i++){
    if(arr[i]!=arr[i+1]){
        arr[j++]=arr[i];
    }
}
 arr[j++]=arr[n-1];


 sieve of eratosthenes
 print all prime number smaller than n;

 bool prime[n+1];
 memset(prime,true,sizeof(prime));

 for(int p=2;p*p<=n;p++){
    if(prime[p]==true){
        for(int i=p*p;i<=n;i+=p){
            prime[i]=false;
        }
    }
 }

 for(int p=2;p<=n;p++){
    if(prime[p])
    cout<<p<<" ";
 }